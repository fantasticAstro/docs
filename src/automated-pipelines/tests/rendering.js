import { jest, test } from '@jest/globals'
import { readFileSync } from 'fs'

import { loadPages } from '../../../lib/page-data.js'
import { get } from '../../../tests/helpers/e2etest.js'

// Get a list of the autogenerated pages
const pageList = await loadPages(undefined, ['en'])

describe('autogenerated docs render', () => {
  jest.setTimeout(3 * 60 * 1000)

  const autogeneratedPages = pageList.filter((page) => page.autogenerated)

  test('all automated pages return a 200 success code', async () => {
    expect.assertions(autogeneratedPages.length)

    const statusCodes = await Promise.all(
      autogeneratedPages.map(async (page) => {
        const url = page.permalinks[0].href
        // Some autogenerated pages can be very slow and might fail.
        // So we allow a few retries to avoid false positives.
        const res = await get(url, { retries: 3 })
        return [url, res.statusCode]
      }),
    )

    for (const [url, status] of statusCodes) {
      expect(status, url).toBe(200)
    }
  })

  const codeqlCliPath = JSON.parse(
    readFileSync('src/codeql-cli/lib/config.json', 'utf-8'),
  ).targetDirectory
  const restPath = JSON.parse(readFileSync('src/rest/lib/config.json', 'utf-8')).targetDirectory
  const ghappsPath = JSON.parse(
    readFileSync('src/github-apps/lib/config.json', 'utf-8'),
  ).targetDirectory
  // Right now only the rest and codeqlcli pages get their frontmatter updated automatically.
  // The apps pages do not get their frontmatter auto-updated since they apply to all versions and they are
  // single pages. The apps pages are also nested inside of the rest pages. So we want to filter out only
  // rest pages and the codeql cli pages for this test.
  const filesWithAutoUpdatedVersions = autogeneratedPages.filter(
    (page) =>
      (!page.fullPath.startsWith(ghappsPath) && page.fullPath.startsWith(restPath)) ||
      page.fullPath.startsWith(codeqlCliPath),
  )
  for (const page of filesWithAutoUpdatedVersions) {
    test(`autogenerated page ${page.fullPath} does not use feature based versioning`, () => {
      expect(page.versions.feature).toBe(undefined)
    })
  }
})
